import argparse
parser = argparse.ArgumentParser(prog='run_least_squared.py', description='''
    Run least squared using `lib_LinearAlgebra.LeastSquaredEstimator`
''')

parser.add_argument('--hdf5-input', required=True, help='''
    HDF5 input path. It should be generated by `util_hdf5.split_hdf5_into_chunks`.
    Or at least follow the same hierarchy.
''')
parser.add_argument('--model-output', required=True, help='''
    Model is save using `lib_LinearAlgebra.LeastSquaredEstimator.minimal_save` 
    in HDF5 format
''')
parser.add_argument('--batch-size', default=128, type=int, help='''
    Batch size to process the input matrix
''')
parser.add_argument('--normalize', action='store_true', help='''
    If specified, run normalization for each feature before least square 
''')
parser.add_argument('--normalizer-output', default=None, help='''
    HDF5 to mean and std inside normalizer used. 
    Default is None which won't output normalizer.
''')
parser.add_argument('--yaml-of-dataset', required=True, help='''
    It will be used to build data scheme.
    Example structure:
    X_index: 0
    Y_index: 1
    covar_names: 
      - covar1
      - covar2
    outcome_names:
      - pheno1
      - pheno2
''')

args = parser.parse_args()

import pandas as pd
import numpy as np
import logging, sys
import util_hdf5
import lib_LinearAlgebra
import h5py

# configing util
logging.basicConfig(
    level = logging.INFO, 
    stream = sys.stderr, 
    format = '%(asctime)s  %(message)s',
    datefmt = '%Y-%m-%d %I:%M:%S %p'
)

logging.info('Loading dataset and building data scheme')
data_scheme, sample_size = util_hdf5.build_data_scheme(
    args.hdf5_input, 
    args.yaml_of_dataset, 
    batch_size = args.batch_size
)

logging.info('Building least squared solver: normalization param = {}'.format(args.normalize))
least_square_solver = lib_LinearAlgebra.LeastSquaredEstimator(data_scheme, intercept = True, normalizer = args.normalize)

logging.info('Running least squared solver')
if args.normalizer_output is not None:
    return_norm = True
else:
    return_norm = False
out = least_square_solver.solve(logging = logging, sample_size = sample_size, return_normalizer = return_norm)

logging.info('Saving model')
least_square_solver.minimal_save(args.model_output, save_inner_product = True)

if args.normalizer_output is not None:
    logging.info('Saving normalizer mean and std')
    with h5py.File(args.normalizer_output, 'w') as f:
        f.create_dataset('mean', data = np.array(out.mean))
        f.create_dataset('std', data = np.array(out.std))


