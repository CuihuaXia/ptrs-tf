# computing environment setup
source /lambda_stor/homes/yanyu.liang/conda_init.sh
conda activate tensorflow
# source /home/yanyul/tensorflow_env.sh
export CUDA_VISIBLE_DEVICES=2

thisdir=`pwd`

# pre-specifics
WORKDIR=/lambda_stor/data/yanyul/GitHub/ptrs-tf/code
cd $WORKDIR

# model_name="mesa_all"
# echo $model_name
# # params
holdout_size=5000
# train_hdf5=/lambda_stor/data/yanyul/washington_UKB/predicted_expression_tf2_new_updated_indivs/ukb_imp_x_MESA_ALL_British.hdf5
data_scheme=/lambda_stor/data/yanyul/GitHub/ptrs-tf/misc_files/data_scheme.yaml
# pred_model=/lambda_stor/data/yanyul/washington_UKB/ptrs-tf/models_new/elastic_net_ptrs_mesa_all_british_{alpha}.hdf5

# # output
OUTDIR=/lambda_stor/data/yanyul/washington_UKB/ptrs-tf/models_new
# tag=elastic_net_ptrs_mesa_all_british.revision
# logfile=$OUTDIR/$tag.export.log
# 
# python train_ptrs.py \
#   --logfile $logfile \
#   --out_prefix $OUTDIR/$tag \
#   --size_of_data_to_hold $holdout_size \
#   --data_hdf5 British:$train_hdf5 \
#   --data_scheme_yaml $data_scheme \
#   --prediction_model $pred_model \
#   --alpha_seq 0.1 \
#   --export \
#   > $thisdir/export_ptrs_model_for_revision.$model_name.log 2>&1
# 
# model_name="mesa_cau"
# echo $model_name
# train_hdf5=/lambda_stor/data/yanyul/washington_UKB/predicted_expression_tf2_new/ukb_imp_x_MESA_CAU_British.hdf5
# against_hdf5=/lambda_stor/data/yanyul/washington_UKB/predicted_expression_tf2_new/ukb_imp_x_MESA_AFHI_British.hdf5
# pred_model=/lambda_stor/data/yanyul/washington_UKB/ptrs-tf/models_new/elastic_net_ptrs_mesa_british_{alpha}.hdf5
# 
# tag=elastic_net_ptrs_mesa_cau_british.revision
# logfile=$OUTDIR/$tag.export.log
# 
# python train_ptrs.py \
#   --logfile $logfile \
#   --out_prefix $OUTDIR/$tag \
#   --size_of_data_to_hold $holdout_size \
#   --data_hdf5 British:$train_hdf5 \
#   --against_hdf5 British:$against_hdf5 \
#   --data_scheme_yaml $data_scheme \
#   --prediction_model $pred_model \
#   --alpha_seq 0.1 \
#   --export \
#   > $thisdir/export_ptrs_model_for_revision.$model_name.log 2>&1
  
model_name="gtex"
echo $model_name
train_hdf5=/lambda_stor/data/yanyul/washington_UKB/predicted_expression_tf2_new/ukb_imp_x_ctimp_Whole_Blood_British.hdf5
pred_model=/lambda_stor/data/yanyul/washington_UKB/ptrs-tf/models_new/elastic_net_ptrs_gtex_british_split_british_baboon_genes_pt_{alpha}.hdf5

gene_list=/lambda_stor/data/yanyul/misc_data/baboon_ptrs/one_to_one_baboon_human_orthologs_for_haky.txt
tmp_gene_list=/lambda_stor/data/yanyul/misc_data/baboon_ptrs/one_to_one_baboon_human_orthologs_for_haky.gene_id_only.txt

if [[ ! -f "${tmp_gene_list}" ]]; then
  cat "${gene_list}" | cut -f 3 | tail -n +2 > "${tmp_gene_list}"
fi

tag=pt_ptrs_gtex_british.baboon_genes
logfile=$OUTDIR/$tag.export.log

python train_ptrs.py \
  --logfile $logfile \
  --out_prefix $OUTDIR/$tag \
  --size_of_data_to_hold $holdout_size \
  --data_hdf5 British:$train_hdf5 \
  --data_scheme_yaml $data_scheme \
  --prediction_model $pred_model \
  --alpha_seq 0.1 \
  --export \
  --gene_list "${tmp_gene_list}" \
  > $thisdir/export_ptrs_model_baboon_pt_lambda.$model_name.log 2>&1


